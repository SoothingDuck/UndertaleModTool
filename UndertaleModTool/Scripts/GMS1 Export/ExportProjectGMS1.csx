using System.Text;
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;

EnsureDataLoaded();

string rootFolder = Path.GetDirectoryName(FilePath) + Path.DirectorySeparatorChar;
ThreadLocal<GlobalDecompileContext> DECOMPILE_CONTEXT = new ThreadLocal<GlobalDecompileContext>(() => new GlobalDecompileContext(Data, false));


// Export Project yyp
using (StreamWriter writer = new StreamWriter(rootFolder + "projectA.project.gmx"))
{
    writer.WriteLine("<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->");
    writer.WriteLine("<assets>");
    writer.WriteLine("  <Configs name=\"configs\">");
    writer.WriteLine("    <Config>Configs\\Default</Config>");
    writer.WriteLine("  </Configs>");
    writer.WriteLine("  <NewExtensions/>");
    // Sounds
    writer.WriteLine("  <sounds name=\"sound\">");
    for(int i=0; i < Data.Sounds.Count; i++) {
        var sound_name = Data.Sounds[i].Name.Content;
        writer.WriteLine("    <sound>sound\\"+ sound_name +"</sound>");
    }
    writer.WriteLine("  </sounds>");
    // Sprites
    writer.WriteLine("  <sprites name=\"sprite\">");
    for(int i=0; i < Data.Sprites.Count; i++) {
        var sprite_name = Data.Sprites[i].Name.Content;
        writer.WriteLine("    <sprite>sprites\\"+ sprite_name +"</sprite>");
    }
    writer.WriteLine("  </sprites>");
    // Backgrounds
    writer.WriteLine("  <backgrounds name=\"background\">");
    for(int i=0; i < Data.Backgrounds.Count; i++) {
        var background_name = Data.Backgrounds[i].Name.Content;
        writer.WriteLine("    <background>background\\"+ background_name +"</background>");
    }
    writer.WriteLine("  </backgrounds>");
    // Paths
    writer.WriteLine("  <paths name=\"paths\">");
    for(int i=0; i < Data.Paths.Count; i++) {
        var path_name = Data.Paths[i].Name.Content;
        writer.WriteLine("    <path>paths\\"+ path_name +"</path>");
    }
    writer.WriteLine("  </paths>");
    // Scripts
    writer.WriteLine("  <scripts name=\"scripts\">");
    for(int i=0; i < Data.Scripts.Count; i++) {
        var script_name = Data.Scripts[i].Name.Content;
        writer.WriteLine("    <script>scripts\\"+ script_name +"</script>");
    }
    writer.WriteLine("  </scripts>");
    // Fonts
    writer.WriteLine("  <fonts name=\"fonts\">");
    for(int i=0; i < Data.Fonts.Count; i++) {
        var font_name = Data.Fonts[i].Name.Content;
        writer.WriteLine("    <font>fonts\\"+ font_name +"</font>");
    }
    writer.WriteLine("  </fonts>");
    // Objects
    writer.WriteLine("  <objects name=\"objects\">");
    for(int i=0; i < Data.GameObjects.Count; i++) {
        var object_name = Data.GameObjects[i].Name.Content;
        writer.WriteLine("    <object>objects\\"+ object_name +"</object>");
    }
    writer.WriteLine("  </objects>");
    // RoomOrderNodes
    writer.WriteLine("  <rooms name=\"rooms\">");
    for(int i=0; i < Data.GeneralInfo.RoomOrder.Count; i++) {
        var room_name = Data.GeneralInfo.RoomOrder[i].Resource.Name.Content;
        writer.WriteLine("    <room>rooms\\"+ room_name +"</room>");
    }
    writer.WriteLine("  </rooms>");
    // Footer
    writer.WriteLine("  <help>");
    writer.WriteLine("    <rtf>help.rtf</rtf>");
    writer.WriteLine("  </help>");
    writer.WriteLine("  <TutorialState>");
    writer.WriteLine("    <IsTutorial>0</IsTutorial>");
    writer.WriteLine("    <TutorialName></TutorialName>");
    writer.WriteLine("    <TutorialPage>0</TutorialPage>");
    writer.WriteLine("  </TutorialState>");
    writer.WriteLine("</assets>");
}

ScriptMessage("Export Complete.\n\nLocation: " + rootFolder);
