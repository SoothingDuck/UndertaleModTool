using System.Text;
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;

EnsureDataLoaded();

string objectsFolder = GetFolder(FilePath) + "objects" + Path.DirectorySeparatorChar;
ThreadLocal<GlobalDecompileContext> DECOMPILE_CONTEXT = new ThreadLocal<GlobalDecompileContext>(() => new GlobalDecompileContext(Data, false));
// if (Directory.Exists(objectsFolder))
// {
//     ScriptError("An object export already exists. Please remove it.", "Error");
//     return;
// }

Directory.CreateDirectory(objectsFolder);

bool exportFromCache = false;
// if (GMLCacheEnabled && Data.GMLCache is not null)
//     exportFromCache = ScriptQuestion("Export from the cache?");

List<UndertaleGameObject> toDump;
if (!exportFromCache)
{
    toDump = new();
    foreach (UndertaleGameObject game_object in Data.GameObjects)
    {
        toDump.Add(game_object);
    }
}

bool cacheGenerated = false;
if (exportFromCache)
{
    cacheGenerated = await GenerateGMLCache(DECOMPILE_CONTEXT);
    await StopProgressBarUpdater();
}

SetProgressBar(null, "Object Entries", 0, exportFromCache ? Data.GMLCache.Count + Data.GMLCacheFailed.Count : toDump.Count);
StartProgressBarUpdater();

await DumpCode();

await StopProgressBarUpdater();
HideProgressBar();
ScriptMessage("Export Complete.\n\nLocation: " + objectsFolder);


string GetFolder(string path)
{
    return Path.GetDirectoryName(path) + Path.DirectorySeparatorChar;
}


async Task DumpCode()
{

    if (Data.KnownSubFunctions is null) //if we run script before opening any code
        Decompiler.BuildSubFunctionCache(Data);

    await Task.Run(() => Parallel.ForEach(toDump, DumpGameObject));
}

void DumpGameObject(UndertaleGameObject game_object)
{
    using (StreamWriter writer = new StreamWriter(objectsFolder + game_object.Name.Content + ".object.gmx"))
    {
	writer.WriteLine("{");
	writer.WriteLine("  \"resourceType\": \"GMObject\",");
	writer.WriteLine("  \"resourceVersion\": \"1.0\",");
	writer.WriteLine("  \"name\": \"obj_player\",");
	writer.WriteLine("  \"eventList\": [");
	writer.WriteLine("    <event eventtype=\"0\" enumb=\"0\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>event_inherited()");
	writer.WriteLine("coins = 0");
	writer.WriteLine("in_knockback = 0");
	writer.WriteLine("defeated_object = 25");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"2\" enumb=\"0\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>in_knockback = 0");
	writer.WriteLine("sprite_index = spr_player_idle");
	writer.WriteLine("image_index = 0");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"3\" enumb=\"2\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>event_inherited()");
	writer.WriteLine("switch sprite_index");
	writer.WriteLine("{");
	writer.WriteLine("    case spr_player_walk:");
	writer.WriteLine("        image_speed = 1");
	writer.WriteLine("        if (vel_x == 0)");
	writer.WriteLine("            sprite_index = spr_player_idle");
	writer.WriteLine("        if (vel_y &gt; 1)");
	writer.WriteLine("        {");
	writer.WriteLine("            sprite_index = spr_player_fall");
	writer.WriteLine("            image_index = 0");
	writer.WriteLine("        }");
	writer.WriteLine("        break");
	writer.WriteLine("    case 54:");
	writer.WriteLine("        if (vel_y &gt;= 0)");
	writer.WriteLine("        {");
	writer.WriteLine("            sprite_index = spr_player_fall");
	writer.WriteLine("            image_index = 0");
	writer.WriteLine("            image_speed = 1");
	writer.WriteLine("        }");
	writer.WriteLine("        break");
	writer.WriteLine("    case 60:");
	writer.WriteLine("        if grounded");
	writer.WriteLine("        {");
	writer.WriteLine("            sprite_index = spr_player_idle");
	writer.WriteLine("            image_speed = 1");
	writer.WriteLine("            audio_play_sound(snd_land_01, 0, false)");
	writer.WriteLine("        }");
	writer.WriteLine("        break");
	writer.WriteLine("    case 10:");
	writer.WriteLine("        if grounded");
	writer.WriteLine("        {");
	writer.WriteLine("            var _dust = instance_create_layer(x, bbox_bottom, layer, obj_effect_knockback)");
	writer.WriteLine("            _dust.image_xscale = image_xscale");
	writer.WriteLine("        }");
	writer.WriteLine("        break");
	writer.WriteLine("    default:");
	writer.WriteLine("        image_speed = 1");
	writer.WriteLine("        break");
	writer.WriteLine("}");
	writer.WriteLine("");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"3\" enumb=\"0\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>event_inherited()");
	writer.WriteLine("audio_listener_set_position(0, x, y, 0)");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"4\" ename=\"obj_enemy_parent\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>if (vel_y &gt; 0)");
	writer.WriteLine("{");
	writer.WriteLine("    if ((bbox_bottom - vel_y) &lt; (other.bbox_top - other.vel_y))");
	writer.WriteLine("    {");
	writer.WriteLine("        other.hp = 0");
	writer.WriteLine("        vel_y = (-jump_speed)");
	writer.WriteLine("        sprite_index = spr_player_jump");
	writer.WriteLine("        image_index = 0");
	writer.WriteLine("        image_speed = 1");
	writer.WriteLine("        instance_create_layer(x, bbox_bottom, \"Instances\", obj_effect_jump)");
	writer.WriteLine("        audio_play_sound(snd_enemy_hit, 0, false)");
	writer.WriteLine("        var _sound = audio_play_sound(snd_jump, 0, false)");
	writer.WriteLine("        audio_sound_pitch(_sound, random_range(0.8, 1))");
	writer.WriteLine("    }");
	writer.WriteLine("}");
	writer.WriteLine("if (no_hurt_frames &gt; 0)");
	writer.WriteLine("{");
	writer.WriteLine("}");
	writer.WriteLine("var _x_sign = sign((x - other.x))");
	writer.WriteLine("vel_x = (_x_sign * 15)");
	writer.WriteLine("hp -= other.damage");
	writer.WriteLine("in_knockback = 1");
	writer.WriteLine("no_hurt_frames = 120");
	writer.WriteLine("sprite_index = spr_player_hurt");
	writer.WriteLine("image_index = 0");
	writer.WriteLine("alarm[0] = 15");
	writer.WriteLine("audio_play_sound(snd_life_lost_01, 0, false)");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"4\" ename=\"obj_end_gate\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>instance_create_layer(x, y, layer, obj_player_end_level)");
	writer.WriteLine("instance_destroy()");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"4\" ename=\"obj_hurt_zone\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>hp -= 1");
	writer.WriteLine("if (hp &gt; 0)");
	writer.WriteLine("{");
	writer.WriteLine("    x = grounded_x");
	writer.WriteLine("    y = grounded_y");
	writer.WriteLine("    no_hurt_frames += 120");
	writer.WriteLine("    vel_x = 0");
	writer.WriteLine("    vel_y = 0");
	writer.WriteLine("    in_knockback = 1");
	writer.WriteLine("    alarm[0] = 20");
	writer.WriteLine("    audio_play_sound(snd_life_lost_01, 0, false)");
	writer.WriteLine("}");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"4\" ename=\"obj_coin\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>coins += 1");
	writer.WriteLine("instance_create_layer(other.x, other.y, \"Instances\", obj_coin_collect_effect)");
	writer.WriteLine("audio_play_sound(snd_coin_collect_01, 0, false)");
	writer.WriteLine("instance_destroy(other)");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"5\" enumb=\"37\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>if in_knockback");
	writer.WriteLine("{");
	writer.WriteLine("}");
	writer.WriteLine("vel_x = (-move_speed)");
	writer.WriteLine("if (sprite_index == spr_player_fall)");
	writer.WriteLine("{");
	writer.WriteLine("}");
	writer.WriteLine("if grounded");
	writer.WriteLine("    sprite_index = spr_player_walk");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"5\" enumb=\"39\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>if in_knockback");
	writer.WriteLine("{");
	writer.WriteLine("}");
	writer.WriteLine("vel_x = move_speed");
	writer.WriteLine("if (sprite_index == spr_player_fall)");
	writer.WriteLine("{");
	writer.WriteLine("}");
	writer.WriteLine("if grounded");
	writer.WriteLine("    sprite_index = spr_player_walk");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"5\" enumb=\"65\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>event_perform(ev_keyboard, vk_left)");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"5\" enumb=\"68\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>event_perform(ev_keyboard, vk_right)");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"7\" enumb=\"7\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>switch sprite_index");
	writer.WriteLine("{");
	writer.WriteLine("    case spr_player_jump:");
	writer.WriteLine("        image_speed = 0");
	writer.WriteLine("        image_index = (image_number - 1)");
	writer.WriteLine("        break");
	writer.WriteLine("    case 60:");
	writer.WriteLine("        image_speed = 0");
	writer.WriteLine("        image_index = (image_number - 1)");
	writer.WriteLine("        break");
	writer.WriteLine("}");
	writer.WriteLine("");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"7\" enumb=\"0\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>if (bbox_top &gt; room_height)");
	writer.WriteLine("{");
	writer.WriteLine("    hp -= 1");
	writer.WriteLine("    if (hp &gt; 0)");
	writer.WriteLine("    {");
	writer.WriteLine("        x = grounded_x");
	writer.WriteLine("        y = grounded_y");
	writer.WriteLine("        no_hurt_frames += 120");
	writer.WriteLine("        vel_x = 0");
	writer.WriteLine("        vel_y = 0");
	writer.WriteLine("        in_knockback = 1");
	writer.WriteLine("        alarm[0] = 20");
	writer.WriteLine("        audio_play_sound(snd_life_lost_01, 0, false)");
	writer.WriteLine("    }");
	writer.WriteLine("}");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"7\" enumb=\"76\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>var _message = ds_map_find_value(event_data, \"message\")");
	writer.WriteLine("if (_message == \"footstep\")");
	writer.WriteLine("{");
	writer.WriteLine("    var _effect = instance_create_layer(x, bbox_bottom, \"Instances\", obj_effect_walk)");
	writer.WriteLine("    _effect.image_xscale = image_xscale");
	writer.WriteLine("    var _sound = choose(8, 7, 11)");
	writer.WriteLine("    audio_play_sound(_sound, 0, false)");
	writer.WriteLine("}");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("    <event eventtype=\"9\" enumb=\"32\">");
	writer.WriteLine("      <action>");
	writer.WriteLine("        <libid>1</libid>");
	writer.WriteLine("        <id>603</id>");
	writer.WriteLine("        <kind>7</kind>");
	writer.WriteLine("        <userelative>0</userelative>");
	writer.WriteLine("        <isquestion>0</isquestion>");
	writer.WriteLine("        <useapplyto>0</useapplyto>");
	writer.WriteLine("        <exetype>2</exetype>");
	writer.WriteLine("        <functionname></functionname>");
	writer.WriteLine("        <codestring></codestring>");
	writer.WriteLine("        <whoName>self</whoName>");
	writer.WriteLine("        <relative>0</relative>");
	writer.WriteLine("        <isnot>0</isnot>");
	writer.WriteLine("        <arguments>");
	writer.WriteLine("          <argument>");
	writer.WriteLine("            <kind>0</kind>");
	writer.WriteLine("            <string>if grounded");
	writer.WriteLine("{");
	writer.WriteLine("    vel_y = (-jump_speed)");
	writer.WriteLine("    sprite_index = spr_player_jump");
	writer.WriteLine("    image_index = 0");
	writer.WriteLine("    grounded = 0");
	writer.WriteLine("    instance_create_layer(x, bbox_bottom, \"Instances\", obj_effect_jump)");
	writer.WriteLine("    var _sound = audio_play_sound(snd_jump, 0, false)");
	writer.WriteLine("    audio_sound_pitch(_sound, random_range(0.8, 1))");
	writer.WriteLine("}");
	writer.WriteLine("</string>");
	writer.WriteLine("          </argument>");
	writer.WriteLine("        </arguments>");
	writer.WriteLine("      </action>");
	writer.WriteLine("    </event>");
	writer.WriteLine("  ],");
	writer.WriteLine("  \"managed\": true,");
	writer.WriteLine("  \"overriddenProperties\": [],");
	writer.WriteLine("  \"parent\": {");
	writer.WriteLine("    \"name\": \"Objects\",");
	writer.WriteLine("    \"path\": \"folders/Objects.yy\",");
	writer.WriteLine("  },");
	writer.WriteLine("  \"parentObjectId\": {");
	writer.WriteLine("    \"name\": \"obj_character_parent\",");
	writer.WriteLine("    \"path\": \"objects/obj_character_parent/obj_character_parent.yy\",");
	writer.WriteLine("  },");
	writer.WriteLine("  \"persistent\": false,");
	writer.WriteLine("  \"physicsAngularDamping\": 0.1,");
	writer.WriteLine("  \"physicsDensity\": 0.5,");
	writer.WriteLine("  \"physicsFriction\": 0.2,");
	writer.WriteLine("  \"physicsGroup\": 1,");
	writer.WriteLine("  \"physicsKinematic\": false,");
	writer.WriteLine("  \"physicsLinearDamping\": 0.1,");
	writer.WriteLine("  \"physicsObject\": false,");
	writer.WriteLine("  \"physicsRestitution\": 0.1,");
	writer.WriteLine("  \"physicsSensor\": false,");
	writer.WriteLine("  \"physicsShape\": 1,");
	writer.WriteLine("  \"physicsShapePoints\": [],");
	writer.WriteLine("  \"physicsStartAwake\": true,");
	writer.WriteLine("  \"properties\": [],");
	writer.WriteLine("  \"solid\": false,");
	writer.WriteLine("  \"spriteId\": {");
	writer.WriteLine("    \"name\": \"spr_player_idle\",");
	writer.WriteLine("    \"path\": \"sprites/spr_player_idle/spr_player_idle.yy\",");
	writer.WriteLine("  },");
	writer.WriteLine("  \"spriteMaskId\": null,");
	writer.WriteLine("  \"visible\": true,");
	writer.WriteLine("}");

    }

    //     if (code is not null)
    //     {
    //         if(code.Name.Content.Contains("gml_Script_")) {
    //             string path = Path.Combine(objectsFolder, code.Name.Content.Substring(11) + ".gml");
    //             try
    //             {
    //                 File.WriteAllText(path, (code != null ? Decompiler.Decompile(code, DECOMPILE_CONTEXT.Value) : ""));
    //             }
    //             catch (Exception e)
    //             {
    //                 File.WriteAllText(path, "/*\nDECOMPILER FAILED!\n\n" + e.ToString() + "\n*/");
    //             }        
    //         }
    //     }

    IncrementProgressParallel();
}
void DumpCachedCode(KeyValuePair<string, string> code)
{
    string path = Path.Combine(objectsFolder, code.Key + ".gml");

    File.WriteAllText(path, code.Value);

    IncrementProgressParallel();
}
