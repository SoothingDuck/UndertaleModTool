// Modified with the help of Agentalex9
using System.Text;
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using UndertaleModLib.Util;

EnsureDataLoaded();

// bool padded = (!ScriptQuestion("Export all sprites unpadded?"));
bool padded = true;


string texFolder = GetFolder(FilePath) + "Export_Sprites" + Path.DirectorySeparatorChar;
string imageFolder = texFolder + "images\\";
TextureWorker worker = new TextureWorker();
if (Directory.Exists(texFolder))
{
    Directory.Delete(texFolder, true);
}
Directory.CreateDirectory(texFolder);
Directory.CreateDirectory(imageFolder);

SetProgressBar(null, "Sprites", 0, Data.Sprites.Count);
StartProgressBarUpdater();

await DumpSprites();
worker.Cleanup();

await StopProgressBarUpdater();
HideProgressBar();
ScriptMessage("Export Complete.\n\nLocation: " + texFolder);


string GetFolder(string path)
{
    return Path.GetDirectoryName(path) + Path.DirectorySeparatorChar;
}

async Task DumpSprites()
{
    await Task.Run(() => Parallel.ForEach(Data.Sprites, DumpSprite));
}

void DumpSprite(UndertaleSprite sprite)
{

    using (StreamWriter writer = new StreamWriter(texFolder + sprite.Name.Content + ".sprite.gmx"))
    {
        writer.WriteLine("<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->");
        writer.WriteLine("<sprite>");
        writer.WriteLine("  <type>0</type>");
        writer.WriteLine("  <xorig>" + sprite.OriginX + "</xorig>");
        writer.WriteLine("  <yorigin>" + sprite.OriginY + "</yorigin>");
        writer.WriteLine("  <colkind>0</colkind>");
        writer.WriteLine("  <coltolerance>0</coltolerance>");
        writer.WriteLine("  <sepmasks>" + (((ushort) sprite.SepMasks) == 0 ? 0 : -1) + "</sepmasks>");
        writer.WriteLine("  <bboxmode>" + sprite.BBoxMode + "</bboxmode>");
        writer.WriteLine("  <bbox_left>" + sprite.MarginLeft + "</bbox_left>");
        writer.WriteLine("  <bbox_right>" + sprite.MarginRight + "</bbox_right>");
        writer.WriteLine("  <bbox_top>" + sprite.MarginTop + "</bbox_top>");
        writer.WriteLine("  <bbox_bottom>" + sprite.MarginBottom + "</bbox_bottom>");
        writer.WriteLine("  <HTile>0</HTile>");
        writer.WriteLine("  <HTile>0</HTile>");
        writer.WriteLine("  <TextureGroups>");
        writer.WriteLine("    <TextureGroup0>0</TextureGroup0>");
        writer.WriteLine("  </TextureGroups>");
        writer.WriteLine("  <For3D>0</For3D>");
        writer.WriteLine("  <width>" + sprite.Width +"</width>");
        writer.WriteLine("  <height>" + sprite.Height + "</height>");
        writer.WriteLine("  <frames>");
        for (int i = 0; i < sprite.Textures.Count; i++)
        {
            if (sprite.Textures[i]?.Texture != null)
            {
                worker.ExportAsPNG(sprite.Textures[i].Texture, imageFolder + sprite.Name.Content + "_" + i + ".png", null, padded); // Include padding to make sprites look neat!
                writer.WriteLine("    <frame index=\"" + i + "\">images\\" + sprite.Name.Content + "_" + i + ".png</frame>");
            }
        }
        writer.WriteLine("  </frames>");
        writer.WriteLine("</sprite>");

    }

    IncrementProgressParallel();
}