// Modified with the help of Agentalex9
using System.Text;
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using UndertaleModLib.Util;

EnsureDataLoaded();

// bool padded = (!ScriptQuestion("Export all sprites unpadded?"));
bool padded = true;


string texFolder = GetFolder(FilePath) + "Export_Sprites" + Path.DirectorySeparatorChar;
TextureWorker worker = new TextureWorker();
if (Directory.Exists(texFolder))
{
  Directory.Delete(texFolder, true);
}
Directory.CreateDirectory(texFolder);

SetProgressBar(null, "Sprites", 0, Data.Sprites.Count);
StartProgressBarUpdater();

await DumpSprites();
worker.Cleanup();

await StopProgressBarUpdater();
HideProgressBar();
ScriptMessage("Export Complete.\n\nLocation: " + texFolder);


string GetFolder(string path)
{
  return Path.GetDirectoryName(path) + Path.DirectorySeparatorChar;
}

async Task DumpSprites()
{
  await Task.Run(() => Parallel.ForEach(Data.Sprites, DumpSprite));
}

void DumpSprite(UndertaleSprite sprite)
{
  Directory.CreateDirectory(texFolder + sprite.Name.Content);
  using (StreamWriter writer = new StreamWriter(texFolder + sprite.Name.Content + "\\" + sprite.Name.Content + ".yy"))
  {
    /*
    writer.WriteLine("<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->");
    writer.WriteLine("<sprite>");
    writer.WriteLine("  <type>0</type>");
    writer.WriteLine("  <xorig>" + sprite.OriginX + "</xorig>");
    writer.WriteLine("  <yorigin>" + sprite.OriginY + "</yorigin>");
    writer.WriteLine("  <colkind>0</colkind>");
    writer.WriteLine("  <coltolerance>0</coltolerance>");
    writer.WriteLine("  <sepmasks>" + (((ushort) sprite.SepMasks) == 0 ? 0 : -1) + "</sepmasks>");
    writer.WriteLine("  <bboxmode>" + sprite.BBoxMode + "</bboxmode>");
    writer.WriteLine("  <bbox_left>" + sprite.MarginLeft + "</bbox_left>");
    writer.WriteLine("  <bbox_right>" + sprite.MarginRight + "</bbox_right>");
    writer.WriteLine("  <bbox_top>" + sprite.MarginTop + "</bbox_top>");
    writer.WriteLine("  <bbox_bottom>" + sprite.MarginBottom + "</bbox_bottom>");
    writer.WriteLine("  <HTile>0</HTile>");
    writer.WriteLine("  <VTile>0</VTile>");
    writer.WriteLine("  <TextureGroups>");
    writer.WriteLine("  <TextureGroup0>0</TextureGroup0>");
    writer.WriteLine("  </TextureGroups>");
    writer.WriteLine("  <For3D>0</For3D>");
    writer.WriteLine("  <width>" + sprite.Width +"</width>");
    writer.WriteLine("  <height>" + sprite.Height + "</height>");
    writer.WriteLine("  <frames>");
    for (int i = 0; i < sprite.Textures.Count; i++)
    {
      if (sprite.Textures[i]?.Texture != null)
      {
        worker.ExportAsPNG(sprite.Textures[i].Texture, imageFolder + sprite.Name.Content + "_" + i + ".png", null, padded); // Include padding to make sprites look neat!
        writer.WriteLine("  <frame index=\"" + i + "\">images\\" + sprite.Name.Content + "_" + i + ".png</frame>");
      }
    }
    writer.WriteLine("  </frames>");
    writer.WriteLine("</sprite>");
    */

    // Dans le répertoire
    /*
    for (int i = 0; i < sprite.Textures.Count; i++)
    {
      if (sprite.Textures[i]?.Texture != null)
      {
        worker.ExportAsPNG(sprite.Textures[i].Texture,texFolder + sprite.Name.Content + "\\" + sprite.Name.Content + "_"+ i + ".png", null, padded); // Include padding to make sprites look neat!
      }
    }
    */

    // Création de layers
    /*
    Directory.CreateDirectory(texFolder + sprite.Name.Content + "\\" + "layers");
    for (int i = 0; i < sprite.Textures.Count; i++)
    {
      if (sprite.Textures[i]?.Texture != null)
      {
        Directory.CreateDirectory(texFolder + sprite.Name.Content + "\\" + "layers" + "\\" + sprite.Name.Content + "_" + i);
        worker.ExportAsPNG(sprite.Textures[i].Texture,texFolder + sprite.Name.Content + "\\" + "layers" + "\\" + sprite.Name.Content + "_"+ i + "\\" + sprite.Name.Content + "_" + "layer" + ".png", null, padded); // Include padding to make sprites look neat!
      }
    }
    */

    writer.WriteLine("{");
    writer.WriteLine("  \"resourceType\": \"GMSprite\",");
    writer.WriteLine("  \"resourceVersion\": \"1.0\",");
    writer.WriteLine("  \"name\": \""+ sprite.Name.Content +"\",");
    writer.WriteLine("  \"bbox_bottom\": 44,");
    writer.WriteLine("  \"bbox_left\": 0,");
    writer.WriteLine("  \"bbox_right\": 249,");
    writer.WriteLine("  \"bbox_top\": 0,");
    writer.WriteLine("  \"bboxMode\": 0,");
    writer.WriteLine("  \"collisionKind\": 1,");
    writer.WriteLine("  \"collisionTolerance\": 0,");
    writer.WriteLine("  \"DynamicTexturePage\": false,");
    writer.WriteLine("  \"edgeFiltering\": false,");
    writer.WriteLine("  \"For3D\": false,");
    writer.WriteLine("  \"gridX\": 0,");
    writer.WriteLine("  \"gridY\": 0,");
    writer.WriteLine("  \"height\": 45,");
    writer.WriteLine("  \"HTile\": false,");
    writer.WriteLine("  \"nineSlice\": null,");
    writer.WriteLine("  \"origin\": 9,");
    writer.WriteLine("  \"parent\": {");
    writer.WriteLine("    \"name\": \"Sprites\",");
    writer.WriteLine("    \"path\": \"folders/Sprites.yy\",");
    writer.WriteLine("  },");
    writer.WriteLine("  \"preMultiplyAlpha\": false,");
    writer.WriteLine("  \"sequence\": {");
    writer.WriteLine("    \"resourceType\": \"GMSequence\",");
    writer.WriteLine("    \"resourceVersion\": \"1.4\",");
    writer.WriteLine("    \"name\": \""+ sprite.Name.Content +"\",");
    writer.WriteLine("    \"autoRecord\": true,");
    writer.WriteLine("    \"backdropHeight\": 768,");
    writer.WriteLine("    \"backdropImageOpacity\": 0.5,");
    writer.WriteLine("    \"backdropImagePath\": \"\",");
    writer.WriteLine("    \"backdropWidth\": 1366,");
    writer.WriteLine("    \"backdropXOffset\": 0.0,");
    writer.WriteLine("    \"backdropYOffset\": 0.0,");
    writer.WriteLine("    \"events\": {\"resourceType\":\"KeyframeStore<MessageEventKeyframe>\",\"resourceVersion\":\"1.0\",\"Keyframes\":[],},");
    writer.WriteLine("    \"eventStubScript\": null,");
    writer.WriteLine("    \"eventToFunction\": {},");
    writer.WriteLine("    \"length\": 1.0,");
    writer.WriteLine("    \"lockOrigin\": false,");
    writer.WriteLine("    \"moments\": {\"resourceType\":\"KeyframeStore<MomentsEventKeyframe>\",\"resourceVersion\":\"1.0\",\"Keyframes\":[],},");
    writer.WriteLine("    \"playback\": 1,");
    writer.WriteLine("    \"playbackSpeed\": 0.0,");
    writer.WriteLine("    \"playbackSpeedType\": 0,");
    writer.WriteLine("    \"showBackdrop\": true,");
    writer.WriteLine("    \"showBackdropImage\": false,");
    writer.WriteLine("    \"timeUnits\": 1,");
    writer.WriteLine("    \"visibleRange\": null,");
    writer.WriteLine("    \"volume\": 1.0,");
    writer.WriteLine("    \"xorigin\": 3,");
    writer.WriteLine("    \"yorigin\": 28,");
    writer.WriteLine("  },");
    writer.WriteLine("  \"swatchColours\": null,");
    writer.WriteLine("  \"swfPrecision\": 2.525,");
    writer.WriteLine("  \"textureGroupId\": {");
    writer.WriteLine("    \"name\": \"Default\",");
    writer.WriteLine("    \"path\": \"texturegroups/Default\",");
    writer.WriteLine("  },");
    writer.WriteLine("  \"type\": 0,");
    writer.WriteLine("  \"VTile\": false,");
    writer.WriteLine("  \"width\": 250,");
    writer.WriteLine("}");

    /*
    writer.WriteLine("{");
    writer.WriteLine("  \"resourceType\": \"GMSprite\",");
    writer.WriteLine("  \"resourceVersion\": \"1.0\",");
    writer.WriteLine("  \"name\": \""+ sprite.Name.Content +"\",");
    writer.WriteLine("  \"bbox_bottom\": "+ sprite.MarginBottom +",");
    writer.WriteLine("  \"bbox_left\": "+ sprite.MarginLeft +",");
    writer.WriteLine("  \"bbox_right\": "+ sprite.MarginRight +",");
    writer.WriteLine("  \"bbox_top\": "+ sprite.MarginTop +",");
    writer.WriteLine("  \"bboxMode\": "+ sprite.BBoxMode +",");
    writer.WriteLine("  \"collisionKind\": "+ (((ushort) sprite.SepMasks) == 0 ? 0 : -1) +",");
    writer.WriteLine("  \"collisionTolerance\": 0,");
    writer.WriteLine("  \"DynamicTexturePage\": false,");
    writer.WriteLine("  \"edgeFiltering\": false,");
    writer.WriteLine("  \"For3D\": false,");
    writer.WriteLine("  \"frames\": [");
    for (int i = 0; i < sprite.Textures.Count; i++)
    {
      if (sprite.Textures[i]?.Texture != null)
      {
        writer.WriteLine("  {\"resourceType\":\"GMSpriteFrame\",\"resourceVersion\":\"1.1\",\"name\":\""+ sprite.Name.Content + "_" + i +"\",},");
      }
    }
    writer.WriteLine("  ],");
    writer.WriteLine("  \"gridX\": 0,");
    writer.WriteLine("  \"gridY\": 0,");
    writer.WriteLine("  \"height\": 162,");
    writer.WriteLine("  \"HTile\": false,");
    writer.WriteLine("  \"layers\": [");
    writer.WriteLine("  {\"resourceType\":\"GMImageLayer\",\"resourceVersion\":\"1.0\",\"name\":\""+ sprite.Name.Content + "_layer" +"\",\"blendMode\":0,\"displayName\":\"default\",\"isLocked\":false,\"opacity\":100.0,\"visible\":true,},");
    writer.WriteLine("  ],");
    writer.WriteLine("  \"nineSlice\": null,");
    writer.WriteLine("  \"origin\": 9,");
    writer.WriteLine("  \"parent\": {");
    writer.WriteLine("  \"name\": \"Sprites\",");
    writer.WriteLine("  \"path\": \"folders/Sprites.yy\",");
    writer.WriteLine("  },");
    writer.WriteLine("  \"preMultiplyAlpha\": false,");
    writer.WriteLine("  \"sequence\": {");
    writer.WriteLine("  \"resourceType\": \"GMSequence\",");
    writer.WriteLine("  \"resourceVersion\": \"1.4\",");
    writer.WriteLine("  \"name\": \""+ sprite.Name.Content +"\",");
    writer.WriteLine("  \"autoRecord\": true,");
    writer.WriteLine("  \"backdropHeight\": 768,");
    writer.WriteLine("  \"backdropImageOpacity\": 0.5,");
    writer.WriteLine("  \"backdropImagePath\": \"\",");
    writer.WriteLine("  \"backdropWidth\": 1366,");
    writer.WriteLine("  \"backdropXOffset\": 0.0,");
    writer.WriteLine("  \"backdropYOffset\": 0.0,");
    writer.WriteLine("  \"events\": {\"resourceType\":\"KeyframeStore<MessageEventKeyframe>\",\"resourceVersion\":\"1.0\",\"Keyframes\":[],},");
    writer.WriteLine("  \"eventStubScript\": null,");
    writer.WriteLine("  \"eventToFunction\": {},");
    writer.WriteLine("  \"length\": "+ sprite.Textures.Count +",");
    writer.WriteLine("  \"lockOrigin\": false,");
    writer.WriteLine("  \"moments\": {\"resourceType\":\"KeyframeStore<MomentsEventKeyframe>\",\"resourceVersion\":\"1.0\",\"Keyframes\":[],},");
    writer.WriteLine("  \"playback\": 1,");
    writer.WriteLine("  \"playbackSpeed\": 36.0,");
    writer.WriteLine("  \"playbackSpeedType\": 0,");
    writer.WriteLine("  \"showBackdrop\": true,");
    writer.WriteLine("  \"showBackdropImage\": false,");
    writer.WriteLine("  \"timeUnits\": 1,");
    writer.WriteLine("  \"tracks\": [");
    writer.WriteLine("    {\"resourceType\":\"GMSpriteFramesTrack\",\"resourceVersion\":\"1.0\",\"name\":\"frames\",\"builtinName\":0,\"events\":[],\"inheritsTrackColour\":true,\"interpolation\":1,\"isCreationTrack\":false,\"keyframes\":{\"resourceType\":\"KeyframeStore<SpriteFrameKeyframe>\",\"resourceVersion\":\"1.0\",\"Keyframes\":[");
    for (int i = 0; i < sprite.Textures.Count; i++)
    {
      if (sprite.Textures[i]?.Texture != null)
      {
        writer.WriteLine("    {\"resourceType\":\"Keyframe<SpriteFrameKeyframe>\",\"resourceVersion\":\"1.0\",\"Channels\":{\"0\":{\"resourceType\":\"SpriteFrameKeyframe\",\"resourceVersion\":\"1.0\",\"Id\":{\"name\":\""+sprite.Name.Content + "_"+ i +"\",\"path\":\"sprites/"+ sprite.Name.Content +"/"+ sprite.Name.Content +".yy\",},},},\"Disabled\":false,\"id\":\""+ sprite.Name.Content + "_" + i + "_id" +"\",\"IsCreationKey\":false,\"Key\":0.0,\"Length\":1.0,\"Stretch\":false,},");
      }
    }
    writer.WriteLine("    ],},\"modifiers\":[],\"spriteId\":null,\"trackColour\":0,\"tracks\":[],\"traits\":0,},");
    writer.WriteLine("  ],");
    writer.WriteLine("  \"visibleRange\": null,");
    writer.WriteLine("  \"volume\": 1.0,");
    writer.WriteLine("  \"xorigin\": 60,");
    writer.WriteLine("  \"yorigin\": 157,");
    writer.WriteLine("  },");
    writer.WriteLine("  \"swatchColours\": null,");
    writer.WriteLine("  \"swfPrecision\": 2.525,");
    writer.WriteLine("  \"textureGroupId\": {");
    writer.WriteLine("  \"name\": \"Default\",");
    writer.WriteLine("  \"path\": \"texturegroups/Default\",");
    writer.WriteLine("  },");
    writer.WriteLine("  \"type\": 0,");
    writer.WriteLine("  \"VTile\": false,");
    writer.WriteLine("  \"width\": 150,");
    writer.WriteLine("}");
    */

  }

  IncrementProgressParallel();
}